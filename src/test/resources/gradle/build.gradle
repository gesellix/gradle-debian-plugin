plugins {
  id 'maven-publish'
  id 'java'
  id 'de.gesellix.debian'
}

group = 'testGrp'
version = '42'

repositories {
  mavenLocal()
}

publishing {
  publications {
    mavenStuff(MavenPublication) {
      artifact file("${projectDir}/../inputfiles/artifact.war")
    }
  }
}

debian {
  packagename = "packagename"
  publications = ['mavenStuff']
  controlDirectory = "../packagename/control"
  changelogFile = "../packagename/debian/changelog"

  data {
    def baseDir = "../packagename/data"
    dir {
      name = baseDir
      exclusions = [
          "etc/init.d/packagename",
          "usr/share/doc/packagename/copyright"]
    }
    file {
      name = "${baseDir}/etc/init.d/packagename"
      target = "etc/init.d/packagename"
      mapper {
        fileMode = "755"
      }
    }
    file {
      name = "${baseDir}/etc/cron.daily/packagename"
      target = "etc/cron.daily/packagename"
      mapper {
        fileMode = "755"
      }
    }
    file {
      name = "${baseDir}/usr/share/packagename/bin/setenv.sh"
      target = "usr/share/packagename/bin/setenv.sh"
      mapper {
        fileMode = "755"
      }
    }
    file {
      name = "${baseDir}/usr/share/packagename/bin/shutdown.sh"
      target = "usr/share/packagename/bin/shutdown.sh"
      mapper {
        fileMode = "755"
      }
    }
    file {
      name = "${baseDir}/usr/share/packagename/bin/startup.sh"
      target = "usr/share/packagename/bin/startup.sh"
      mapper {
        fileMode = "755"
      }
    }
    link {
      path = "/etc/packagename/"
      name = "var/lib/packagename/conf"
    }
  }
}

project.afterEvaluate {
  tasks.named("buildDeb") {
    println("found buildDeb task: ${it.name}")

    println("packagename: ${it.packagename}")
    println("changelogFile: ${it.changelogFile.canonicalPath}")
    println("controlDirectory: ${it.controlDirectory.canonicalPath}")
    println("publications: ${it.publications}")
    println("data in de.gesellix.gradle.debian.tasks.data.Data: ${it.data in de.gesellix.gradle.debian.tasks.data.Data}")
    println("outputFile: ${it.outputFile.canonicalPath}")

    println("dependsOn: ${it.taskDependencies.getDependencies(it).collect { d -> d.name}.sort()}")
  }
}

tasks.register("for-test") {
  dependsOn(tasks.assemble)
  doLast {
    println "This is a test task."
    println "Extension packagename: ${debian.packagename}."
  }
}
